#!/bin/ksh

v() {
    has emacsclient && pgrep -x emacs > /dev/null && {
        xembed --parent-id emacsclient -c "${@}"
        return 0
    }

    vi "${@}"
}

has git && {
    git() {
        case ${1} {
        (ignore-get)
            wget -O gitignore \
                https://raw.githubusercontent.com/github/gitignore/master/${2}.gitignore
            ;;
        (squash)
            local cnf
            print -n 'do you want to continue? '
            read -r cnf
            [[ "${cnf:0:1}" != 'y' ]] && return 0
            local n=${2}
            shift 2
            local msg="${@}"
            cmd git reset --soft HEAD~${n}
            cmd git commit -m "${msg}"
            ;;
        (add)
            [[ "${2}" = @('.'|'*') ]] && {
                print no
                return 0
            }
            cmd git "${@}"
            ;;
        (com*)
            shift
            local fnl="${@}"
            [[ "${2}" = "-i" ]] && {
                shift
                fnl='${@} --interactive'
            }
            cmd git commit -m "${fnl}"
            ;;
        (clone)
            local fnl="${@}"
            [[ "${2}" != *viz* ]] && fnl="${@} --depth 1"
            cmd git ${fnl}
            ;;
        (push)
            cmd git push origin `cmd git rev-parse --abbrev-ref HEAD`
            ;;
        (tracked)
            cmd git ls-tree -r --name-only \
                `cmd git rev-parse --abbrev-ref HEAD`
            ;;
        (untracked)
            cmd git ls-files --others --exclude-standard
            ;;
        (*)
            cmd git "${@}"
            ;;
        }
    }
    a diff='cmd git diff'
}

has emacs && {
    remacs() {
        pgrep -x emacs > /dev/null && pkill emacs
        emacs --daemon
    }

    # for use with emacs-libvterm
    elisp() {
        [[ -z ${INSIDE_EMACS} ]] && exit 1
        [[ ${INSIDE_EMACS} = 'vterm' ]] && printf '\033]51;E%s\033\\' "${@}"
    }
}

has mpv && has piko && {
    yt() {
        piko "${1}" -stdout | mpv -
    }
}