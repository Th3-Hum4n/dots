;; This is loaded by visrc.lua which is generated by home-manager

;; TODO: * Consider binding ^w binds to tmux commands
;;       * Register :terminal to create a terminal split
;;       * Replace vis-open with fzy?
;;       * Should I change pwd to `basename win.file.path`?

;; NOTE: * if acts more like cond

(require "vis")

;; Lisp functions

(fn car [list] (. list 1))

;; Side-effects suck
(fn cdr [list]
  (let [l list]
    (table.remove l 1)
    l))

(fn cadr [list] (car (cdr list)))

(fn foreach [fun list]
  (each [_ x (ipairs list)]
    (fun x)))

(fn ormap [fun list]
  (if (= (length list) 0)
        false
      (fun (car list))
        true
    (ormap fun (cdr list))))

(fn null?     [x] (= x nil))
(fn not-null? [x] (not (null? x)))


;; General helper functions

;; :| in FILE_SAVE_PRE segfaults. Check #652
;; From vis-go
(fn vis/pipe [file cmd]
  (let [(status out err) (vis:pipe file {"start" 0 "finish" file.size} cmd)
        pos vis.win.selection.pos]
    (if (or (> 0 status) (not out))
          (do (when  err (vis:info err)) false)
      (do (file:delete 0 file.size)
        (file:insert 0 out)
        (set vis.win.selection.pos pos))))
  true)


;; String functions

(fn startswith [str prefix]
  (= (string.sub str 1 (string.len prefix))
    prefix))

(fn endswith [str suffix]
  (= (string.sub str (- (string.len str) (string.len suffix) -1) -1)
    suffix))


;; set ... functions

;; Set the global config. Called in INIT
(fn set/global []
  (foreach (fn [x] (vis:command (.. "set " x)))
    ["tw 4" "syntax off"]))

;; Set the default configuration for languages
(fn set/default []
  (foreach (fn [x] (vis:command (.. "set " x)))
    ["tw 4" "et off" "ai off"]))

;; This is absolutely broken for multiple windows
;; I will be solving it by using tmux
;; Vis events aren't flexible enough
(local flangs ["nix" "rkt" "fnl" "scm"])
(fn set/lang [win]
  (set/default)
  (if (and (not-null? win.file.path)
          (ormap (fn [x] (endswith win.file.path (.. "." x))) flangs))
        (foreach (fn [x] (vis:command (.. "set " x)))
          ["tw 2" "et on" "ai on"])))


;; Language specific functions
   
;; Run `go fmt` if file ends w/ .go
(fn go/fmt [file path]
  (when (and (not-null? path) (endswith path ".go"))
          (vis/pipe file "gofmt")))


;; Commands/Keybinds

(fn cmd/ns [_] (vis:command "!ns"))
(fn cmd/oxo [_ _ win _ range]
  (os.execute (string.format "printf '%s\n' | 0x0 | xin"
    (win.file:content
      (if (null? range) {"start" 0 "finish" win.file.size} range))))
  (vis:redraw))

;; Register commands
(vis:command_register "ns" cmd/ns)
(vis:command_register "oxo" cmd/oxo)

;; Register keybinds
(vis:map vis.modes.NORMAL " ns" cmd/ns)


;; Misc

;; Hijacking this function for proper selection style
(fn vis.types.window.set_syntax [win syntax]
  (set win.syntax nil)
  (foreach (fn [x] (win:style_define (car x) (cadr x)))
    [[win.STYLE_CURSOR         "back: 16"]
     [win.STYLE_STATUS         ""]
     [win.STYLE_STATUS_FOCUSED "reverse"]])
   true)

;; Set title of the vis window

(fn *settitle* [title]
  (vis:command
    (string.format ":!printf '\\033]]0;%s: %s\\a'"
        (if (not (os.getenv "IN_NIX_SHELL"))
              "vis" "!vis")
          title)))

(fn settitle [win]
  (if (null? win.file.path)
        (*settitle* "*new*")
      (not (startswith win.file.path (os.getenv "HOME")))
        (*settitle* win.file.path)
    (*settitle* (.. "~" (string.sub win.file.path
                          (+ 1 (string.len (os.getenv "HOME"))) -1)))))


;; Event subscriptions

(vis.events.subscribe vis.events.INIT set/global)
(vis.events.subscribe vis.events.FILE_SAVE_PRE go/fmt)
(vis.events.subscribe vis.events.WIN_OPEN (fn [win]
  (settitle win)
  (set/lang win)
  (vis:command "set rnu on")))
