_nxsh() {
	# This function is pretty much a rip-off of https://git.io/Jfe01
	((${#}==0)) && {
		# I have a shell.nix file in ${PWD}
		NIX_BUILD_SHELL="${HOME}/lib/ksh/.nxsh" \
			NIX_EXECUTING_SHELL="${SHELL}" nix-shell
		return 0
	}
	local inpkgs=0 args="${@}" NIX_SHELL_PACKAGES
	while ((${#}>0)); do
		case ${1} {
		-p|--packages)
			inpkgs=1
			NIX_SHELL_PACKAGES+="${NIX_SHELL_PACKAGES:+ }${2}"
			shift
			;;
		--arg|--argstr)
			inpkgs=0
			shift 2
			;;
		-*)
			inpkgs=0
			;;
		*)
			[[ ${inpkgs} -eq 1 ]] &&
				NIX_SHELL_PACKAGES+=" ${1}"
			;;
		}
		shift
	done
	# Stupid ass hack to get multiple packages working
	eval NIX_SHELL_PACKAGES='"'${NIX_SHELL_PACKAGES}'"' \
		NIX_BUILD_SHELL="${HOME}/lib/ksh/.nxsh" \
		NIX_EXECUTING_SHELL="${SHELL}" nix-shell "${args}"
}

nx() {
	case ${1} {
	sr)
		shift
		find /nix/store -maxdepth 1 -type d `
			for i; {
				print -- -name "*${i}*"
			}`
		;;
	shl)
		[[ -e shell.nix ]] && {
			print error: shell.nix already exists
			return 1
		}
		cat >shell.nix <<EOF
with import <nixpkgs> {};

stdenv.mkDerivation rec {
  name = "";
  version = "";

  buildInputs = [];
  nativeBuildInputs = [];
}
EOF
		;;
	sh)
		shift 1
		_nxsh "${@}"
		;;
	pkg)
		[[ -e ${2} ]] && {
			print error: ${2} already exists
			return 1
		}
		[[ -z ${2} ]] && {
			print error: no file argument given
			return 1
		}
		cat >${2} <<EOF
{ stdenv, fetch }:

stdenv.mkDerviation rec {
  name = "";
  version = "";
  url = fetch {
  };

  buildInputs = [];
  nativeBuildInputs = [];

  patches = [];

  makeFlags = [];
  installFlags = [];

  meta = with stdenv.lib; {
    description = "";
    homepage = ;
    license = licenses.;
    platforms = platforms.linux;
  };
}
EOF
		;;
	*)
		cat <<EOF
usage: nx [shl|pkg file|sh ...|sr ...]
	shl: create shell.nix template
	pkg: write package template
	sh: start nix-shell
	sr: search in /nix/store
EOF
		;;
	}
}
