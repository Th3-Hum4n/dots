#!/usr/bin/python3
# get the pronounciation of a word
import urllib.request, urllib.error
import json
import subprocess
import sys

def request_data(word):
    url = "https://www.dictionaryapi.com/api/v3/references/collegiate/json/" +\
        f"{word}?key=a0c23fb0-7a8b-4860-8795-f0c122bae363"
    try:
        data = urllib.request.urlopen(url).read()
        return data
    except:
        return None

def get_audio_file_name(word):
    data = request_data(word)
    data = json.loads(data)

    # this convuluted mess exists because the way dictionaryapi.com returns
    # data is a mess
    try:
        audio_file_name = data[0].get("hwi").get("prs")
        audio_file_name = audio_file_name[0].get("sound").get("audio")
    except:
        return

    return audio_file_name

def get_audio_url(audio_file_name: str):
    # handle exceptions first
    # TODO: add start with number exception
    if audio_file_name.startswith("bix"):
        sub_dir = "bix"
    elif audio_file_name.startswith("gg"):
        sub_dir = "gg"
    else:
        sub_dir = audio_file_name[0]

    audio_url = "https://media.merriam-webster.com/soundc11/" +\
        f"{sub_dir}/{audio_file_name}.wav"

    return audio_url

def play_audio(word):
    # the function which wraps around all the functions above
    # NOTE: get_audio_file_name() requests data itself
    audio_file = get_audio_file_name(word)
    if not audio_file:
        return
    audio_url = get_audio_url(audio_file)

    # download the wav file
    try:
        urllib.request.urlretrieve(audio_url, filename="/tmp/audio.wav")
    except:
        return
    # play the audio in mpv
    play_mpv = subprocess.Popen("mpv /tmp/audio.wav 2> /dev/null", shell=True)
    play_mpv.wait()

    return True

# get arguments
arguments = sys.argv[1:]

if not arguments:
    print("usage\n----\nsay word1 word2 word3...")
    sys.exit(1)

for word in arguments:
    successful_play = play_audio(word)
    if not successful_play:
        print("word cannot be found")

# cleanup the file we have created
rm = subprocess.Popen("rm -rf /tmp/audio.wav", shell=True)
rm.wait()
